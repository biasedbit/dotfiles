#!/usr/bin/env bash
#
# Bootstrap a Unix env with common dofiles and tools.
cd "$(dirname $0)"

source "includes.sh"

# --- OS setup

case "$OSTYPE" in
  darwin*)
    # Install homebrew if not already installed
    if test ! $(which brew); then
      info "Installing Homebrew..."
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    # Install all packages in the Brewfile
    info "Installing all packages in Brewfile..."
    brew update
    brew bundle -v
    brew cleanup
    ;;
  "linux-gnu")
    info "Installing packages..."
    sh "Aptfile"
    echo ""
    ;;
  *)
    fail "Unknown OS ($OSTYPE), exiting."
    ;;
esac

# --- Install modules

CONFIG_DIR="$(cd "$(dirname "$0")" && pwd -P)/configs"

run_installers() {
  # config/ modules with install.sh files
  local files=($CONFIG_DIR/*/install.sh)
  for file in "${files[@]}"; do
    info "Setting up $(basename $(dirname $file))..."
    sh -c "$file"
  done
}

run_installers

# --- Submodules init

# Grab all submodules before moving on
info "Initializing submodules..."
git config --global url."https://github.com/".insteadOf git://github.com/
git submodule update --init --recursive

# --- .dotfiles setup

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then
        skip=true
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src (already linked)"
    fi
  fi

  if [ "$skip" != "true" ]; then  # "false" or empty
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  local overwrite_all=false backup_all=false skip_all=false

  local files=($CONFIG_DIR/*/*.symlink)
  for file in "${files[@]}"; do
    dst="$HOME/.$(basename "${file%.*}")"
    link_file "$file" "$dst"
  done
}

info "Installing dotfiles..."
install_dotfiles

# Default to zsh instead of bash; requires desktop logout/login.
info "Updating default shell (chsh -s zsh)..."

zsh=$(which zsh)
# chsh in macOS complains if the shell is not defined in /etc/shells
if [[ "$OSTYPE" == darwin* ]]; then
  # Add it if isn't already there
  if ! grep -q "$zsh" "/etc/shells"; then
    info "Adding $zsh to /etc/shells"
    echo "$zsh" | sudo tee -a "/etc/shells"
  fi
fi
chsh -s $zsh

success "All done!"
